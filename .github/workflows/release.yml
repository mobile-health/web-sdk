# .github/workflows/release.yml

name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # We need full history to correctly version
          fetch-depth: 0

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'yarn'
      
      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Create Release and Push Tags
        id: changesets
        uses: changesets/action@v1
        with:
          # This command tells the action to run 'changeset version'
          # and then 'changeset tag' which creates and pushes Git tags.
          publish: yarn changeset tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tags created on this commit
        id: tags
        run: |
          git fetch --tags
          NEW_TAGS=$(git tag --points-at HEAD | tr '\n' ' ')
          echo "tags=$NEW_TAGS" >> $GITHUB_OUTPUT

      - name: Create GitHub Releases for new tags
        if: steps.tags.outputs.tags != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for TAG in ${{ steps.tags.outputs.tags }}; do
            gh release view "$TAG" >/dev/null 2>&1 || gh release create "$TAG" --title "$TAG" --notes "Automated release by Changesets"
          done

      - name: Pack tarballs for tagged packages
        run: |
          mkdir -p release-artifacts
          for PKG_DIR in packages/*; do
            if [ -f "$PKG_DIR/package.json" ]; then
              NAME=$(node -p "require('./$PKG_DIR/package.json').name")
              if [[ "${{ steps.tags.outputs.tags }}" == *"$NAME@"* ]]; then
                (cd "$PKG_DIR" && npm pack --pack-destination ../../release-artifacts)
              fi
            fi
          done
          ls -la release-artifacts || true

      - name: Upload tarballs to corresponding releases
        if: steps.tags.outputs.tags != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for TAG in ${{ steps.tags.outputs.tags }}; do
            PKG_NAME="${TAG%@*}"
            BASE_NAME="${PKG_NAME#@}"
            BASE_NAME="${BASE_NAME//\//-}"
            TARBALL=$(ls release-artifacts/${BASE_NAME}-*.tgz 2>/dev/null | head -n 1 || true)
            if [ -n "$TARBALL" ]; then
              gh release upload "$TAG" "$TARBALL" --clobber
            fi
          done